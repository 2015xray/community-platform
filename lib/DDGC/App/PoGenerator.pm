package DDGC::App::PoGenerator;

use Moose;
use DDGC;
use File::Spec;
use IO::All;

with qw(
	MooseX::Getopt
);

has targetdir => (
	isa => 'Str',
	is => 'ro',
	required => 1,
);

has context => (
	isa => 'Str',
	is => 'ro',
	required => 1,
);

has auto => (
	isa => 'Bool',
	is => 'ro',
	default => sub { 0 },
);

# NOT IMPLEMENTED YET
has fallback => (
	isa => 'Bool',
	is => 'ro',
	default => sub { 0 },
);

has _ddgc => (
	traits => [qw( NoGetopt )],
	isa => 'DDGC',
	is => 'ro',
	default => sub { DDGC->new },
);
sub d { shift->_ddgc }

has _dir => (
	traits => [qw( NoGetopt )],
	isa => 'Str',
	is => 'ro',
	lazy_build => 1,
);
sub dir { shift->_dir }

sub _build__dir {
	my ( $self ) = @_;
	return $self->targetdir if File::Spec->file_name_is_absolute($self->targetdir);
	return File::Spec->rel2abs($self->targetdir);
}

sub BUILD {
	my ( $self ) = @_;
	my $context = $self->d->rs('Token::Context')->search({ key => $self->context })->first;
	$self->error("no context found") unless $context;
	$self->error("not writeable") unless -w $self->_dir;
	my $time = time;
	my $ref = ref $self;
	for my $tl ($context->token_context_languages->all) {
		my $locale = $tl->language->locale;
		my $file = io($self->dir.'/'.$locale.'.po');
		my $intro = << "EOF";
# Autogenerated by $ref
# time: $time
#
EOF
		$intro > $file;
		for ($tl->search_related('token_languages')->all) {
			$_->auto_use if ($self->auto && !$_->translation);
			if ($_->translation) {
				"\n" >> $file;
				'msgid "'.$_->token->name.'"'."\n" >> $file;
				'msgstr "'.$_->translation.'"'."\n" >> $file;
			}
		}
	}
}

sub error { die "[".(ref shift)."] ".shift }

1;