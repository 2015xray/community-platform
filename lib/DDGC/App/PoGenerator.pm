package DDGC::App::PoGenerator;

use Moose;
use DDGC;
use File::Spec;
use File::Which;
use IO::All -utf8;
use Path::Class;
use Carp;

with qw(
	MooseX::Getopt
);

has targetdir => (
	isa => 'Str',
	is => 'ro',
	required => 1,
);

has domain => (
	isa => 'Str',
	is => 'ro',
	predicate => 'has_domain',
);

has alldomain => (
	isa => 'Bool',
	is => 'ro',
	default => sub { 0 },
);

has auto => (
	isa => 'Bool',
	is => 'ro',
	default => sub { 1 },
);

has fallback => (
	isa => 'Bool',
	is => 'ro',
	default => sub { 1 },
);

has _ddgc => (
	traits => [qw( NoGetopt )],
	isa => 'DDGC',
	is => 'ro',
	default => sub { DDGC->new },
);
sub d { shift->_ddgc }

has _dir => (
	traits => [qw( NoGetopt )],
	isa => 'Str',
	is => 'ro',
	lazy_build => 1,
);

sub _build__dir {
	my ( $self ) = @_;
	return $self->targetdir if File::Spec->file_name_is_absolute($self->targetdir);
	return File::Spec->rel2abs($self->targetdir);
}

sub BUILD {
	my ( $self ) = @_;
	$self->error("po2json not found - DDG::Translate installed?") unless which('po2json');
	$self->error("msgfmt not found - gettext installed?") unless which('msgfmt');
	$self->error($self->_dir." is not writeable") unless -w $self->_dir;
	if ($self->has_domain) {
		$self->error("got domain and alldomain at once") if $self->alldomain;
		my $tc = $self->d->rs('Token::Domain')->search({ key => $self->domain })->first;
		$self->error("no domain found") unless $tc;
		$self->generate_pos_for_domain($tc,$self->_dir);
	} elsif ($self->alldomain) {
		for ($self->d->rs('Token::Domain')->search({})->all) {
			$self->generate_pos_for_domain($_,$self->_dir);
		}
	} else {
		$self->error("no domain given and no alldomain")
	}
}

sub generate_pos_for_domain {
	my ( $self, $token_domain, $dir ) = @_;
	for my $tcl ($token_domain->token_domain_languages->all) {
		$self->generate_po_for_locale($tcl,$dir);
	}
}

sub generate_po_for_locale {
	my ( $self, $token_domain_language, $dir ) = @_;
	my $locale = $token_domain_language->language->locale;
	my $time = time;
	my $ref = ref $self;
	my $lang = $token_domain_language->language->name_in_english;
	my $lang_loc = $token_domain_language->language->name_in_local;
	my $plural_forms = $token_domain_language->language->plural_forms;
	mkdir(dir($dir,$locale)) if !-d dir($dir,$locale);
	mkdir(dir($dir,$locale,'LC_MESSAGES')) if !-d dir($dir,$locale,'LC_MESSAGES');
	my $basedir = dir($dir,$locale,'LC_MESSAGES');
	my $po_filename = $basedir->file($token_domain_language->token_domain->key.'.po')->absolute;
	my $mo_filename = $basedir->file($token_domain_language->token_domain->key.'.mo')->absolute;
	my $json_filename = $basedir->file($token_domain_language->token_domain->key.'.json')->absolute;
	my $po = io($po_filename);
	my $intro = << "EOF";
#
# Autogenerated by $ref
#
# language: $lang
# locale: $locale
# time: $time
#
msgid ""
msgstr ""
"Project-Id-Version: DuckDuckGo-Translation-0.000\\n"
"Last-Translator: Community\\n"
"Language-Team: DuckDuckGo Community <community\@duckduckgo.com>\\n"
"POT-Creation-Date: 2009-06-14 09:29-0400\\n"
"PO-Revision-Date: 2009-06-14 09:29-0400\\n"
"Language: $lang_loc ($lang)\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: $plural_forms\\n"

EOF
	$intro > $po;
	my %doublecheck;
	for ($token_domain_language->search_related('token_languages')->all) {
		$_->auto_use if $self->auto; # should be renamed
		my $msgid = $_->token->msgid;
		$msgid .= '||||msgctxt||||'.$_->token->msgctxt if $_->token->msgctxt;
		my $tid = $_->token->id;
		if (defined $doublecheck{$msgid}) {
			warn 'Token #'.$tid.' is a double of Token #'.$doublecheck{$msgid}.', I will ignore it';
		} else {
			$doublecheck{$msgid} = $tid;
			$_->gettext_snippet($self->fallback) >> $po;
		}
	}
	exit 1 if system("msgfmt -c ".$po_filename." -o ".$mo_filename);
	exit 1 if system("po2json ".$po_filename." > ".$json_filename);
}

sub error { die "[".(ref shift)."] ".shift }

1;